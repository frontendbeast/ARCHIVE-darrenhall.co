#!/bin/bash

# Load nvm so npm command is found
export NVM_DIR="/usr/local/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm

unset GIT_DIR

# We'll use this for the release folder name
DATE=$(date +"%Y%m%d%H%M")

# Where our repo lives
REPO_PATH=/var/www/darrenhall.co/repo.git

# Cater for multiple similtaneous branch pushes
while read oldrev newrev refname
do
    # Get name of branch that is being pushed
    BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)

    # The name of the PM2 process that we will restart after building
    PM2_PROCESS=darrenhall.co

    # Web root
    WWW_ROOT=/var/www/darrenhall.co

    # Environment
    ENV=production

    if [ "$BRANCH" != "master" ]; then
        # We're not on master, so switch to staging
        PM2_PROCESS=staging.$PM2_PROCESS
        WWW_ROOT=$WWW_ROOT/subdomains/staging
        ENV=development
    fi

    # Set deployment paths
    WWW_CURRENT=$WWW_ROOT/current
    WWW_RELEASES=$WWW_ROOT/releases
    WWW_RELEASE=$WWW_RELEASES/$DATE

    # Debugging info
    echo "---"
    echo "Branch: $BRANCH"
    echo "Release: $DATE"
    echo "---"

    # Create new release folder if it does not exist
    if [ ! -d $WWW_RELEASE ]; then mkdir $WWW_RELEASE; fi

    # Set working tree to this release and checkout repo
    git --work-tree=$WWW_RELEASE --git-dir=$REPO_PATH checkout $BRANCH -f

    # Use correct version of node
    nvm use v6.9.1

    # Install npm_modules
    cd $WWW_RELEASE
    npm install

    # Get data
    cd source
    if [ ! -d data ]; then mkdir data; fi
    NODE_ENV=$ENV node store.js update
    cd ../

    # Build front end
    gulp --prod

    # Remove all but last 5 releases
    ls -trd $WWW_RELEASES/* | head -n -5 | xargs rm -rf

    # Symlink new release as current
    ln -sfn $WWW_RELEASE $WWW_CURRENT

    # Restart PM2
    pm2 restart $PM2_PROCESS
done
